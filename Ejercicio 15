% =============================================== 
% Autor: De La Teja Gonzalez Miguel Adolfo 
% Fecha: 6 de Noviembre de 2024 
% Descripción: 50 ejercicios 
% ===============================================

% -------- Búsqueda binaria	------------

section .data
    array dd 1, 3, 5, 7, 9, 11, 13, 15, 17, 19  ; Array ordenado de enteros (10 elementos)
    n_elements equ 10                           ; Número de elementos en el array
    target dd 11                                ; Valor objetivo que buscamos
    not_found_msg db "Valor no encontrado", 0
    found_msg db "Valor encontrado en la posición:", 0

section .bss
    pos resd 1                                  ; Posición del elemento encontrado (si existe)

section .text
    global _start

_start:
    ; Inicialización de variables
    mov eax, 0                  ; Inicio del array (low)
    mov ebx, n_elements - 1      ; Fin del array (high)
    mov ecx, dword[target]       ; Valor objetivo a buscar
    mov edx, -1                  ; Variable para almacenar el índice si se encuentra el valor (-1 indica no encontrado)

binary_search:
    cmp eax, ebx                 ; Si low > high, terminamos la búsqueda
    jg not_found

    ; Calcular el índice medio
    mov esi, eax
    add esi, ebx
    shr esi, 1                   ; (low + high) / 2, usando desplazamiento a la derecha para dividir entre 2

    ; Comparar array[esi] con el valor objetivo
    mov edi, dword[array + esi * 4]   ; Cargar array[esi] en edi
    cmp edi, ecx                      ; Comparar array[esi] con el target

    je found                          ; Si son iguales, encontramos el valor
    jl search_right                   ; Si array[esi] < target, buscar en la mitad derecha

    ; Si array[esi] > target, buscar en la mitad izquierda
    mov ebx, esi                      ; high = mid - 1
    dec ebx
    jmp binary_search

search_right:
    mov eax, esi                      ; low = mid + 1
    inc eax
    jmp binary_search

found:
    mov edx, esi                      ; Guardar la posición encontrada en edx
    mov [pos], edx                    ; Guardar la posición en la variable pos
    ; Aquí puedes imprimir un mensaje indicando que se encontró el valor, si tienes una rutina de salida

not_found:
    ; Aquí puedes imprimir un mensaje indicando que no se encontró el valor, si tienes una rutina de salida

exit:
    mov eax, 1                        ; Llamada al sistema: sys_exit
    int 0x80                          ; Interrupción para terminar el programa
